// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	jetflow "github.com/mathieupost/jetflow"
	mock "github.com/stretchr/testify/mock"
)

// OperatorClient is an autogenerated mock type for the OperatorClient type
type OperatorClient struct {
	mock.Mock
}

type OperatorClient_Expecter struct {
	mock *mock.Mock
}

func (_m *OperatorClient) EXPECT() *OperatorClient_Expecter {
	return &OperatorClient_Expecter{mock: &_m.Mock}
}

// Call provides a mock function with given fields: ctx, call
func (_m *OperatorClient) Call(ctx context.Context, call jetflow.Request) ([]byte, error) {
	ret := _m.Called(ctx, call)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, jetflow.Request) ([]byte, error)); ok {
		return rf(ctx, call)
	}
	if rf, ok := ret.Get(0).(func(context.Context, jetflow.Request) []byte); ok {
		r0 = rf(ctx, call)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, jetflow.Request) error); ok {
		r1 = rf(ctx, call)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OperatorClient_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type OperatorClient_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - ctx context.Context
//   - call jetflow.Request
func (_e *OperatorClient_Expecter) Call(ctx interface{}, call interface{}) *OperatorClient_Call_Call {
	return &OperatorClient_Call_Call{Call: _e.mock.On("Call", ctx, call)}
}

func (_c *OperatorClient_Call_Call) Run(run func(ctx context.Context, call jetflow.Request)) *OperatorClient_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(jetflow.Request))
	})
	return _c
}

func (_c *OperatorClient_Call_Call) Return(res []byte, err error) *OperatorClient_Call_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *OperatorClient_Call_Call) RunAndReturn(run func(context.Context, jetflow.Request) ([]byte, error)) *OperatorClient_Call_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, id, operator
func (_m *OperatorClient) Find(ctx context.Context, id string, operator interface{}) error {
	ret := _m.Called(ctx, id, operator)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, id, operator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OperatorClient_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type OperatorClient_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - operator interface{}
func (_e *OperatorClient_Expecter) Find(ctx interface{}, id interface{}, operator interface{}) *OperatorClient_Find_Call {
	return &OperatorClient_Find_Call{Call: _e.mock.On("Find", ctx, id, operator)}
}

func (_c *OperatorClient_Find_Call) Run(run func(ctx context.Context, id string, operator interface{})) *OperatorClient_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *OperatorClient_Find_Call) Return(_a0 error) *OperatorClient_Find_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OperatorClient_Find_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *OperatorClient_Find_Call {
	_c.Call.Return(run)
	return _c
}

// NewOperatorClient creates a new instance of OperatorClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOperatorClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *OperatorClient {
	mock := &OperatorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
