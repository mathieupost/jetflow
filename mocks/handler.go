// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	jetflow "github.com/mathieupost/jetflow"
	mock "github.com/stretchr/testify/mock"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

type Handler_Expecter struct {
	mock *mock.Mock
}

func (_m *Handler) EXPECT() *Handler_Expecter {
	return &Handler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: ctx, client, call
func (_m *Handler) Handle(ctx context.Context, client jetflow.OperatorClient, call jetflow.Request) ([]byte, error) {
	ret := _m.Called(ctx, client, call)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, jetflow.OperatorClient, jetflow.Request) ([]byte, error)); ok {
		return rf(ctx, client, call)
	}
	if rf, ok := ret.Get(0).(func(context.Context, jetflow.OperatorClient, jetflow.Request) []byte); ok {
		r0 = rf(ctx, client, call)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, jetflow.OperatorClient, jetflow.Request) error); ok {
		r1 = rf(ctx, client, call)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Handler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type Handler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - client jetflow.OperatorClient
//   - call jetflow.Request
func (_e *Handler_Expecter) Handle(ctx interface{}, client interface{}, call interface{}) *Handler_Handle_Call {
	return &Handler_Handle_Call{Call: _e.mock.On("Handle", ctx, client, call)}
}

func (_c *Handler_Handle_Call) Run(run func(ctx context.Context, client jetflow.OperatorClient, call jetflow.Request)) *Handler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(jetflow.OperatorClient), args[2].(jetflow.Request))
	})
	return _c
}

func (_c *Handler_Handle_Call) Return(_a0 []byte, _a1 error) *Handler_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Handler_Handle_Call) RunAndReturn(run func(context.Context, jetflow.OperatorClient, jetflow.Request) ([]byte, error)) *Handler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
