// Code generated by jetflowgen. DO NOT EDIT.

package gen

import (
	"context"
	"encoding/json"

	"github.com/pkg/errors"
	"github.com/mathieupost/jetflow"
	"github.com/mathieupost/jetflow/log"

	types "{{ .Package }}"
)

{{ $type := $.Type -}}
var _ jetflow.OperatorHandler = (*{{ $type.Name }}Handler)(nil)

type {{ $type.Name }}Handler struct {
	instance types.{{ $type.Name }}
}

func New{{ $type.Name }}Handler(id string) jetflow.OperatorHandler {
	instance := types.New{{ $type.Name }}(id)
	return &{{ $type.Name }}Handler{instance}
}

func (o *{{$type.Name}}Handler) Handle(ctx context.Context, client jetflow.OperatorClient, call *jetflow.Request) (bytes []byte, err error) {
	log.Println("{{$type.Name}}Handler.Handle\n", call)
	switch call.Method {
{{ range $i, $method := $type.Methods }}
	case "{{$method.Name}}":
{{- if gt (len $method.Parameters) 0 }}
		var args {{$type.Name}}_{{$method.Name}}_Args
		err := json.Unmarshal(call.Args, &args)
		if err != nil {
			return nil, errors.Wrap(err, "unmarshalling {{$type.Name}}_{{$method.Name}}_Args")
		}
{{- range $i, $param := $method.Parameters }}
{{- if gt (len $param.Type.Methods) 0 }}
		args.{{toCamel $param.Name}}.client = client
{{- end }}
{{- end }}
{{- end }}
{{- if gt (len $method.Results) 0 }}
		res := {{$type.Name}}_{{$method.Name}}_Result{}
{{- end }}
{{ range $i, $param := $method.Results -}}
		res.Res{{$i}}, {{ end -}}
		err = o.instance.{{$method.Name}}(
			ctx,
{{- range $i, $param := $method.Parameters }}
			args.{{toCamel $param.Name}},
{{- end }}
		)
		if err != nil {
			return nil, errors.Wrap(err, "calling {{$type.Name}}.{{$method.Name}}")
		}
{{- if gt (len $method.Results) 0 }}
		bytes, err = json.Marshal(res)
		if err != nil {
			return nil, errors.Wrap(err, "marshaling {{$type.Name}}_{{$method.Name}}_Result")
		}
{{- end }}
		return bytes, nil
{{ end }}
	default:
		return nil, errors.Errorf("unknown method %s", call.Method)
	}
}
