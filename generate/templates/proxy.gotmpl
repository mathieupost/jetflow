// Code generated by jetflowgen. DO NOT EDIT.

package gen

import (
	"context"
	"encoding/json"

	"github.com/pkg/errors"
	"github.com/mathieupost/jetflow"

	types "{{ .Package }}"
)

{{ $type := $.Type -}}
var (
	_ types.{{ $type.Name }} = (*{{ $type.Name }}Proxy)(nil)
	_ jetflow.Operator = (*{{ $type.Name }}Proxy)(nil)
)

type {{ $type.Name }}Proxy struct {
	id     string
	client jetflow.OperatorClient
}

func New{{ $type.Name }}Proxy(id string, client jetflow.OperatorClient) jetflow.Operator {
	return &{{ $type.Name }}Proxy{id: id, client: client}
}

func (u *{{ $type.Name }}Proxy) ID() string {
	return u.id
}
{{ range $i, $method := $type.Methods }}
type {{ $type.Name }}_{{ $method.Name }}_Args struct {
{{- range $i, $param := $method.Parameters }}
{{- if gt (len $param.Type.Methods) 0 }}
	{{toCamel $param.Name}} *{{$param.Type.Name}}Proxy
{{- else }}
	{{toCamel $param.Name}} {{$param.Type.Name}}
{{- end }}
{{- end }}
}

func (u *{{ $type.Name }}Proxy) {{ $method.Name }}(
	ctx context.Context,
{{- range $i, $param := $method.Parameters }}
{{- if gt (len $param.Type.Methods) 0 }}
	{{$param.Name}} types.{{$param.Type.Name}},
{{- else }}
	{{$param.Name}} {{$param.Type.Name}},
{{- end }}
{{- end }}
) error {

	args := {{ $type.Name }}_{{ $method.Name }}_Args{
{{- range $i, $param := $method.Parameters }}
{{- if gt (len $param.Type.Methods) 0 }}
		{{$param.Name}}.(*{{$param.Type.Name}}Proxy),
{{- else }}
		{{$param.Name}},
{{- end }}
{{- end }}
	}
	data, err := json.Marshal(args)
	if err != nil {
		return errors.Wrap(err, "marshalling {{ $method.Name }} args")
	}
	call := &jetflow.Request{
		Name:   "{{ $type.Name }}",
		ID:     u.id,
		Method: "{{ $method.Name }}",
		Args:   data,
	}
	_, err = u.client.Call(ctx, call)
	return errors.Wrap(err, "call client {{ $type.Name }}Proxy.{{ $method.Name }}")
}
{{ end }}
// MarshalJSON implements json.Marshaler.
func (u {{ $type.Name }}Proxy) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.id)
}

// UnmarshalJSON implements json.Unmarshaler.
func (u *{{ $type.Name }}Proxy) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &u.id)
}
