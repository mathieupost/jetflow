// Code generated by jetflowgen. DO NOT EDIT.

package gen

import (
	"context"
	"encoding/json"

	"github.com/mathieupost/jetflow"
	"github.com/mathieupost/jetflow/log"
	"github.com/pkg/errors"

	types "github.com/mathieupost/jetflow/example/types"
)

var _ jetflow.OperatorHandler = (*UserHandler)(nil)

type UserHandler struct {
	instance types.User
}

func NewUserHandler(id string) jetflow.OperatorHandler {
	instance := types.NewUser(id)
	return &UserHandler{instance}
}

func (o *UserHandler) Handle(ctx context.Context, client jetflow.OperatorClient, call *jetflow.Request) (res []byte, err error) {
	log.Println("UserHandler.Handle\n", call)
	switch call.Method {

	case "TransferBalance":
		var args User_TransferBalance_Args
		err := json.Unmarshal(call.Args, &args)
		if err != nil {
			return nil, errors.Wrap(err, "unmarshalling User.TransferBalance args")
		}
		args.U2.client = client
		err = o.instance.TransferBalance(
			ctx,
			args.U2,
			args.Amount,
		)
		return nil, errors.Wrap(err, "calling User.TransferBalance")

	case "AddBalance":
		var args User_AddBalance_Args
		err := json.Unmarshal(call.Args, &args)
		if err != nil {
			return nil, errors.Wrap(err, "unmarshalling User.AddBalance args")
		}
		err = o.instance.AddBalance(
			ctx,
			args.Amount,
		)
		return nil, errors.Wrap(err, "calling User.AddBalance")

	case "GetBalance":
		res0, err := o.instance.GetBalance(ctx)
		if err != nil {
			return nil, errors.Wrap(err, "calling User.GetBalance")
		}
		result := User_GetBalance_Result{
			Res0: res0,
		}
		res, err = json.Marshal(result)
		return res, errors.Wrap(err, "marshaling User_GetBalance_Result")

	default:
		return nil, errors.Errorf("unknown method %s", call.Method)
	}
}
