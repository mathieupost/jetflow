// Code generated by jetflowgen. DO NOT EDIT.

package gen

import (
	"context"
	"encoding/json"

	"github.com/mathieupost/jetflow"
	"github.com/pkg/errors"

	types "github.com/mathieupost/jetflow/example/types"
)

var (
	_ types.User       = (*UserProxy)(nil)
	_ jetflow.Operator = (*UserProxy)(nil)
)

type UserProxy struct {
	id     string
	client jetflow.OperatorClient
}

func NewUserProxy(id string, client jetflow.OperatorClient) jetflow.Operator {
	return &UserProxy{id: id, client: client}
}

func (u *UserProxy) ID() string {
	return u.id
}

type User_TransferBalance_Args struct {
	U2     *UserProxy
	Amount int
}

func (u *UserProxy) TransferBalance(
	ctx context.Context,
	u2 types.User,
	amount int,
) (err error) {
	args := User_TransferBalance_Args{
		u2.(*UserProxy),
		amount,
	}

	data, err := json.Marshal(args)
	if err != nil {
		err = errors.Wrap(err, "marshalling User_TransferBalance_Args")
		return
	}

	call := &jetflow.Request{
		Name:   "User",
		ID:     u.id,
		Method: "TransferBalance",
		Args:   data,
	}

	_, err = u.client.Call(ctx, call)
	if err != nil {
		err = errors.Wrap(err, "call client UserProxy.TransferBalance")
		return
	}

	return nil
}

type User_AddBalance_Args struct {
	Amount int
}

func (u *UserProxy) AddBalance(
	ctx context.Context,
	amount int,
) (err error) {
	args := User_AddBalance_Args{
		amount,
	}

	data, err := json.Marshal(args)
	if err != nil {
		err = errors.Wrap(err, "marshalling User_AddBalance_Args")
		return
	}

	call := &jetflow.Request{
		Name:   "User",
		ID:     u.id,
		Method: "AddBalance",
		Args:   data,
	}

	_, err = u.client.Call(ctx, call)
	if err != nil {
		err = errors.Wrap(err, "call client UserProxy.AddBalance")
		return
	}

	return nil
}

type User_GetBalance_Result struct {
	Res0 int
}

func (u *UserProxy) GetBalance(
	ctx context.Context,
) (res0 int, err error) {
	call := &jetflow.Request{
		Name:   "User",
		ID:     u.id,
		Method: "GetBalance",
	}

	var res []byte
	res, err = u.client.Call(ctx, call)
	if err != nil {
		err = errors.Wrap(err, "call client UserProxy.GetBalance")
		return
	}

	var result User_GetBalance_Result
	err = json.Unmarshal(res, &result)
	if err != nil {
		return 0, errors.Wrap(err, "Unmarshalling User_GetBalance_Result")
	}

	return result.Res0, nil
}

// MarshalJSON implements json.Marshaler.
func (u UserProxy) MarshalJSON() ([]byte, error) {
	return json.Marshal(u.id)
}

// UnmarshalJSON implements json.Unmarshaler.
func (u *UserProxy) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &u.id)
}
